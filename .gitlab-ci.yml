image: node:14-alpine

stages:
  - install
  - compile
  - build
  - deploy


variables:
  TAG_LATEST: $CI_REGISTRY_IMAGE/panel:latest
  TAG_COMMIT: $CI_REGISTRY_IMAGE/panel:$CI_COMMIT_SHORT_SHA


cache: &global_cache
  key:
    files:
      - package-lock.json
  paths:
    - node_modules
  policy: pull

install:
  stage: install
  script:
    - npm install sass-loader -D
    - npm install node-sass -D
    - npm install --frozen-lockfile --production
  cache:
    <<: *global_cache
    policy: push
  rules:
    - changes:
        - package-lock.json
      when: always

compile:
  stage: compile
  variables:
    LOCAL_HOST: 'http://185.239.105.176/api'
  script:
    - CI=false
    - NODE_ENV=production npm run build
    - CI=false npm run generate
  cache:
    <<: *global_cache
  artifacts:
    expire_in: 1 day
    name: "$CI_JOB_NAME-$CI_COMMIT_SHA"
    paths:
      - dist
  only:
    - master
  

compile_stg:
  stage: compile
  variables:
    VUE_APP_DOMAIN: 'http://185.239.105.176/api'
  script:
    - CI=false
    - NODE_ENV=production npm run build
    - CI=false npm run generate
  cache:
    <<: *global_cache
  artifacts:
    expire_in: 1 day
    name: "$CI_JOB_NAME-$CI_COMMIT_SHA"
    paths:
      - dist
  only:
    - staging    

publish:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  script:
    - docker build -t $TAG_COMMIT -t $TAG_LATEST -f ./.build/Dockerfile .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST
  only:
    - master

deploy:
  image: alpine:latest
  stage: deploy
  cache: {}
  dependencies: []
  tags:
    - deployment
  before_script:
    - apk add --no-cache curl
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $TAG_COMMIT"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f panel || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p 8087:80 --name panel $TAG_COMMIT"
  environment:
    name: production
    url: http://185.235.41.237
  only:
    - master



deploy_stg:
  stage: build
  dependencies:
    - compile_stg
  before_script:
    - apk update
    - apk add lftp
  script:
    - lftp -c "set ftp:ssl-allow no; open -u $USERNAME,$PASSWORD $HOST; mirror -Rnv  --transfer-all --upload-older -L --no-overwrite --verbose  dist/ ./  --ignore-time --parallel=10 --exclude-glob .git* --exclude .git/"
  only:
    - staging


